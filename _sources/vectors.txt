绘制矢量
========

GMT中能够绘制矢量的模块包括 ``psxy`` 、 ``psxyz`` 、 ``grdvector`` 和 ``psvelo`` 等。除此之外，其他能够绘制线段的模块也会间接绘制矢量。

所有的矢量都可以分成两个独立的部分：

#. 矢量线部分，由画笔属性（ :doc:`pen` ）和线条属性（ :doc:`lines` ）控制
#. 矢量箭头部分，具体属性接下来会介绍

矢量分类
--------

GMT中的矢量可以分为三类：

#. 笛卡尔矢量：矢量线是直线。可以通过如下几种方式指定

   #. 给定起点和终点
   #. 给定起点、方向和长度（使用长度单位）
   #. 给定起点、方位角和长度（单位为km）

#. 弧形矢量：矢量线是圆弧，通过给定圆心、半径以及圆弧起始和结束的角度来指定
#. 地理矢量：矢量线是大圆弧，通过两种方式指定

   #. 给定起点和终点
   #. 给定起点、方位角和长度（单位为km）

.. figure:: /images/GMT_arrows.*
   :width: 600 px
   :align: center

   GMT中的三种矢量箭头

   （左）笛卡尔矢量；（中）弧形矢量；（右）地理矢量

矢量箭头属性
------------

可以为矢量相关选项（比如 ``psxy`` 的 ``-Sv`` 和 ``-Sm`` 选项 ）加上额外的子选项来控制矢量箭头的属性。

绘制矢量时，默认只有矢量线没有矢量头，可以使用下面几个子选项为矢量加上矢量头：

- ``+b[t|c|a][l|r]`` ：在矢量线的首端加上矢量头。 ``t|c|a`` 用于控制矢量头的形状，分别表示矢量头为终点线（垂直于示例线的短线）、圆圈或者箭头，默认是箭头。 ``l|r`` 表示只绘制矢量的头的左半边或右半边（默认两边都绘制）
- ``+e[t|c|a][l|r]`` ：在矢量线的尾端加上矢量头。其他同上
- ``+m[f|r][t|c|a][l|r]`` ：在矢量线的中间加上矢量头。 ``f|r`` 表示矢量头沿着正方向或逆方向（默认值从首端指向尾端），其他同上。注意， ``+m`` 不能与 ``+b`` 或 ``+e`` 一起使用

下面的子选项可以进一步控制矢量头的外观：

- ``+a<angle>`` 控制矢量箭头顶端的夹角，默认值为30度
- ``+l`` 表示只绘制左半个箭头
- ``+r`` 表示只绘制右半个箭头
- ``+g<fill>`` 设置箭头填充色， ``<fill>`` 为 ``-`` 表示不填充（该选项似乎无效）
- ``+p[-][<pen>]`` 设置箭头轮廓的画笔属性（该选项似乎无效）

还有其他一些子选项：

- ``+n<norm>`` 默认情况下，矢量头的大小不随着矢量线的长度变化而变化，这可能会出现矢量长度太小时矢量头过大的情况。该选项使得矢量长度小于 ``<norm>`` 时，矢量头的属性（画笔宽度，箭头大小）会根据矢量长度按照 ``length/<norm>`` 缩放
- ``+t[b|e]<trim>`` 将矢量的首端或尾端偏移一定长度， ``<trim>`` 为正值表示矢量长度变短，为负值表示矢量长度变长。还可以使用 ``+t<trim1>/<trim2>`` 语法分别为首端和尾端指定偏移量
- ``+o<plon>/<plat>`` 见官方文档
- ``+q`` 表明输入数据中的 ``angle`` 和 ``length`` 被解释为矢量的开始和结束的角度

除了弧形矢量外，其他矢量还可以使用如下子选项：

- ``+j<just>`` 默认情况下，输入数据中的XY坐标会作为矢量的首端坐标，该选项可以修改这一行为， ``<just>`` 可以取 ``b|e|c`` 分别代表首端、尾端和中间
- ``+s`` 表明输入数据中的 ``angle`` 和 ``length`` 被解释为矢量的尾端XY坐标

对于笛卡尔矢量而言，还可以使用：

- ``+z<scale>[<unit>]`` 见官方文档

矢量示例
--------

下图展示了部分GMT可以绘制的矢量。

.. figure:: /images/GMT_arrows_types.*
   :width: 600 px
   :align: center

   矢量箭头类型
